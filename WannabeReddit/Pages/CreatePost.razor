@using WannabeRedditShared.Domain.DTOs
@using WannabeRedditShared.Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IPostService postService
@inject NavigationManager navMgr

@page "/createpost"

<PageTitle>Create Post</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <label>You can't post when not logged in</label>
                <label>click here to log in</label>
                <button @onclick="LogIn">Log in</button>
    </NotAuthorized>
    <Authorized>
        <h3>Create Post</h3>
                <div class="form-group field">
                    <label>Assignee:</label>
                    <label>@username</label>
                </div>
                <div class="form-group field">
                    <label>Title:</label>
                    <input type="text" @bind="postTitle"/>
                </div>
                <div class="form-group field">
                    <label>Body:</label>


                    <RadzenHtmlEditor @bind-Value="postBody" style="height: 300px;"  UploadUrl="upload/image" />

                </div>
                <div class="button-row">
                    <button @onclick="Create" class="acceptbtn">Create</button>
                </div>

                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: red">@msg</label>
                }
    </Authorized>
</AuthorizeView>

@code {
    private string username = "";
    private string postTitle = "";
    private string postBody = "";

    private string msg = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        username = user.Claims.FirstOrDefault(x => x.Type == "DisplayName")?.Value ?? "Not logged in";
    }

    private async Task Create() {
        msg = "";

        if (string.IsNullOrEmpty(postTitle)) {
            msg = "Title cannot be empty!";
            return;
        }

        try {
            PostCreate dto = new(postTitle, postBody);
            await postService.CreateAsync(dto);
            Proceed();
        } catch (Exception e) {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed() {
        navMgr.NavigateTo("/");
    }

    private void LogIn() {
        navMgr.NavigateTo("/Login");
    }
}
