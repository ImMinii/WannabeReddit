@using WannabeRedditShared.Domain.DTOs
@using WannabeRedditShared.Domain.Models
@using HttpClients.ClientInterfaces
@inject IUserService userService
@inject IPostService postService
@inject NavigationManager navMgr

@page "/createpost"

<PageTitle>Create Post</PageTitle>

<h1>Create post</h1>

<div class="card">
    @if (user == null)
    {
        <label>You can't post when not logged in</label>
        <label>click here to log in</label>
        <button @onclick="LogIn">Log in</button>
    }
    else
    {
        <h3>Create Post</h3>
        <div class="form-group field">
            <label>Assignee:</label>
            <label>@user.Name</label>
        </div>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div class="form-group field">
            <label>Body:</label>
            
            
            <RadzenHtmlEditor @bind-Value="postBody" style="height: 300px;"  UploadUrl="upload/image" />
           
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

@code {
    private IEnumerable<User>? users;
    private User user;
    private string postTitle = "";
    private string postBody = "";

    private string msg = "";

    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            user = new("juli175h", "123"){
                Id = 2
                };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (user == null)
        {
            msg = "user must be logged in";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            PostCreate dto = new(user, postTitle,postBody);
            await postService.CreateAsync(dto);
            showModal = true;
            Proceed();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/Home");
    }

    private void LogIn()
    {
        navMgr.NavigateTo("/Login");
    }

}
